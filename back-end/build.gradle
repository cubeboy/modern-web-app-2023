import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.jetbrains.kotlin.jvm' version '1.9.21'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.21'
  id 'org.jetbrains.kotlin.plugin.jpa' version '1.8.22'
}

ext {
  jjwtVersion = '0.12.5'
}

group = 'com.open'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'

  implementation "io.jsonwebtoken:jjwt-api:$jjwtVersion"
  runtimeOnly "io.jsonwebtoken:jjwt-impl:$jjwtVersion"
  runtimeOnly "io.jsonwebtoken:jjwt-jackson:$jjwtVersion"

  developmentOnly 'org.springframework.boot:spring-boot-devtools'
//  implementation 'org.springframework.security:spring-security-test'
  // https://mvnrepository.com/artifact/org.springframework.security/spring-security-test
  testImplementation 'org.springframework.security:spring-security-test:6.2.2'
  runtimeOnly 'org.mariadb:r2dbc-mariadb:1.1.3'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
  testImplementation 'com.h2database:h2'
  testImplementation 'io.r2dbc:r2dbc-h2'
  testImplementation 'io.mockk:mockk:1.13.8'

}

tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs += '-Xjsr305=strict'
		jvmTarget = '17'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
  doFirst {
    systemProperty('SECRET_KEY', UUID.randomUUID().toString())
  }
}
